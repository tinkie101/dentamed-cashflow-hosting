server {
    listen 443 ssl;
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }
    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

      location / {
        access_by_lua_block {
            local opts = {
              redirect_uri_path = "/redirect_uri",
              discovery = "https://<DOMAIN>/auth/realms/<REALM>/.well-known/openid-configuration",
              client_id = "<CLIENT>",
              client_secret = "<KEYCLOAK_SECRET>",
              redirect_uri_scheme = "https",
              logout_path = "/logout",
              redirect_after_logout_uri = "https//<DOMAIN>/auth/realms/<REALM>/protocol/openid-connect/logout?redirect_uri=http://localhost/",
              redirect_after_logout_with_id_token_hint = false,
              -- This is really, really important
              accept_none_alg = false,
              accept_unsupported_alg = false,
              renew_access_token_on_expiry = true,
              session_contents = {access_token=true, id_token=true}
            }
            -- call introspect for OAuth 2.0 Bearer Access Token validation
            local res, err = require("resty.openidc").authenticate(opts)
            if err then
              ngx.status = 500
              ngx.say(err)
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- Set valid access token and email as request header
            ngx.log(ngx.STDERR, res.access_token)
            ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
            ngx.req.set_header("X-User", res.id_token.email)
          }

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass_header  Authorization;
          proxy_pass http://cashflow-ui5/;
      }

      location /java/ {
        access_by_lua_block {
            local opts = {
              redirect_uri_path = "/redirect_uri",
              discovery = "https://<DOMAIN>/auth/realms/<REALM>/.well-known/openid-configuration",
              client_id = "<CLIENT>",
              client_secret = "<KEYCLOAK_SECRET>",
              redirect_uri_scheme = "https",
              logout_path = "/logout",
              redirect_after_logout_uri = "https://<DOMAIN>/auth/realms/<REALM>/protocol/openid-connect/logout?redirect_uri=http://localhost/",
              redirect_after_logout_with_id_token_hint = false,
              -- This is really, really important
              accept_none_alg = false,
              accept_unsupported_alg = false,
              renew_access_token_on_expiry = true,
              session_contents = {access_token=true, id_token=true}
            }
            -- call introspect for OAuth 2.0 Bearer Access Token validation
            local res, err = require("resty.openidc").authenticate(opts)
            if err then
              ngx.status = 500
              ngx.say(err)
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- Set valid access token and email as request header
            ngx.log(ngx.STDERR, res.access_token)
            ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
            ngx.req.set_header("X-User", res.id_token.email)
          }
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header  Authorization;
        proxy_pass http://cashflow-odata:8080/;
      }

      location /auth {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass https://cashflow-keycloak:8443;
      }

      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
      }
}
server {
        listen 80 default_server;
        location /.well-known/acme-challenge/ {
                content_by_lua_block {
                        auto_ssl:challenge_server()
                }
        }

        location / {
                return 301 https://$host$request_uri;
        }
}

server {
    listen 127.0.0.1:8999;
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
        content_by_lua_block {
            auto_ssl:hook_server()
        }
    }
}
